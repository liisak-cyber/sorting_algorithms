#include "sort.h"

/**
 * swap_ints - Swap two integers in an array.
 * @a: The first integer to swap.
 * @b: The second integer to swap.
 */
void swap_ints(int *a, int *b)
{
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

/**
 * hoare_partition - Partition the array using Hoare's partition scheme.
 * @array: The array to be partitioned.
 * @size: The size of the array.
 * @left: The starting index of the partition to be partitioned.
 * @right: The ending index of the partition to be partitioned.
 *
 * Return: The final partition index.
 */
int hoare_partition(int *array, size_t size, int left, int right)
{
    int driver = array[right];
    int up, down;

    for (up = left - 1, down = right + 1; up < down;)
    {
        do {
            up++;
        } while (array[up] < driver);
        do {
            down--;
        } while (array[down] > driver);

        if (up < down)
        {
            swap_ints(&array[up], &array[down]);
            print_array(array, size);
        }
    }

    return up;
}

/**
 * hoare_sort - Implement the quicksort algorithm through recursion.
 * @array: An array of integers to sort.
 * @size: The size of the array.
 * @left: The starting index of the array partition to order.
 * @right: The ending index of the array partition to order.
 */
void hoare_sort(int *array, size_t size, int left, int right)
{
    if (right - left > 0)
    {
        int belong = hoare_partition(array, size, left, right);
        hoare_sort(array, size, left, belong);
        hoare_sort(array, size, belong + 1, right);
    }
}

/**
 * quick_sort_hoare - Sorts an array of integers in ascending order
 *                    using the quicksort algorithm (Hoare partition scheme).
 * @array: The array to be sorted.
 * @size: The size of the array.
 */
void quick_sort_hoare(int *array, size_t size)
{
    if (array == NULL || size < 2)
        return;

    hoare_sort(array, size, 0, size - 1);
}

Best case: O(n log n)
Average case: O(n log n)
Worst case: O(n^2)
