#include "sort.h"

/**
 * sift_down - Perform the sift down operation on a binary heap.
 * @array: The array representing the binary heap.
 * @start: The starting index of the subtree to sift down.
 * @end: The ending index of the subtree to sift down.
 * @size: The size of the array.
 */
void sift_down(int *array, size_t start, size_t end, size_t size)
{
    size_t root = start;
    while (2 * root + 1 <= end)
    {
        size_t child = 2 * root + 1;
        size_t swap = root;

        if (array[swap] < array[child])
            swap = child;
        if (child + 1 <= end && array[swap] < array[child + 1])
            swap = child + 1;
        if (swap != root)
        {
            int temp = array[root];
            array[root] = array[swap];
            array[swap] = temp;
            print_array(array, size);
            root = swap;
        }
        else
            return;
    }
}

/**
 * heap_sort - Sorts an array of integers in ascending order using the Heap sort algorithm.
 * @array: The array to be sorted.
 * @size: The size of the array.
 */
void heap_sort(int *array, size_t size)
{
    if (array == NULL || size < 2)
        return;

    for (int i = size / 2 - 1; i >= 0; i--)
        sift_down(array, i, size - 1, size);

    for (int end = size - 1; end > 0; end--)
    {
        int temp = array[end];
        array[end] = array[0];
        array[0] = temp;
        print_array(array, size);
        sift_down(array, 0, end - 1, size);
    }
}

Best case:O(nlogn)
Average case:O(nlogn)
Worst case:O(nlogn)
